{"ast":null,"code":"import{supabase}from'../lib/supabase';export const budgetService={// Create a new chapter\nasync createChapter(projectId,chapterKey,header){// Get the highest position value to place this chapter at the end\nconst{data:chapters,error:fetchError}=await supabase.from('chapters').select('position').eq('project_id',projectId).order('position',{ascending:false}).limit(1);if(fetchError){console.error('Error fetching chapters for position:',fetchError);return{error:fetchError};}const position=chapters.length>0?chapters[0].position+1:0;const{data,error}=await supabase.from('chapters').insert([{project_id:projectId,chapter_key:chapterKey,header,position}]).select().single();if(error){console.error('Error creating chapter:',error);return{error};}return{data};},// Update a chapter\nasync updateChapter(chapterId,updates){const{data,error}=await supabase.from('chapters').update(updates).eq('id',chapterId).select().single();if(error){console.error('Error updating chapter:',error);return{error};}return{data};},// Delete a chapter\nasync deleteChapter(chapterId){// First, get the chapter to know its project and position\nconst{data:chapter,error:fetchError}=await supabase.from('chapters').select('*').eq('id',chapterId).single();if(fetchError){console.error('Error fetching chapter for deletion:',fetchError);return{error:fetchError};}// Delete all budget items in this chapter\nconst{error:itemsError}=await supabase.from('budget_items').delete().eq('chapter_id',chapterId);if(itemsError){console.error('Error deleting budget items:',itemsError);return{error:itemsError};}// Delete the chapter\nconst{error:deleteError}=await supabase.from('chapters').delete().eq('id',chapterId);if(deleteError){console.error('Error deleting chapter:',deleteError);return{error:deleteError};}// Update positions of remaining chapters\nconst{error:updateError}=await supabase.from('chapters').update({position:supabase.raw('position - 1')}).eq('project_id',chapter.project_id).gt('position',chapter.position);if(updateError){console.error('Error updating chapter positions:',updateError);return{error:updateError};}return{success:true};},// Reorder chapters\nasync reorderChapters(projectId,chapterOrder){// chapterOrder should be an array of chapter IDs in the new order\nfor(let i=0;i<chapterOrder.length;i++){const{error}=await supabase.from('chapters').update({position:i}).eq('id',chapterOrder[i]).eq('project_id',projectId);if(error){console.error('Error reordering chapters:',error);return{error};}}return{success:true};},// Create a new budget item\nasync createItem(chapterId,itemData){// Get the chapter to validate project access and determine chapter_key\nconst{data:chapter,error:chapterError}=await supabase.from('chapters').select('*').eq('id',chapterId).single();if(chapterError){console.error('Error fetching chapter for item creation:',chapterError);return{error:chapterError};}// Get the highest position value to place this item at the end\nconst{data:items,error:fetchError}=await supabase.from('budget_items').select('position').eq('chapter_id',chapterId).order('position',{ascending:false}).limit(1);if(fetchError){console.error('Error fetching items for position:',fetchError);return{error:fetchError};}const position=items.length>0?items[0].position+1:0;// Create a unique item ID in the format used by the app (e.g., \"1-1\")\nconst itemNumber=position+1;const itemId=`${chapter.chapter_key.split(' ')[1]}-${itemNumber}`;// Calculate the total value\nconst totalValue=itemData.QTD*itemData.VALOR_UNITARIO;const{data,error}=await supabase.from('budget_items').insert([{chapter_id:chapterId,material:itemData.MATERIAL,unit:itemData.UNIDADE,quantity:itemData.QTD,unit_price:itemData.VALOR_UNITARIO,total_value:totalValue,position}]).select().single();if(error){console.error('Error creating budget item:',error);return{error};}// Transform the item to match the app's data structure\nconst transformedItem={id:itemId,MATERIAL:data.material,UNIDADE:data.unit,QTD:data.quantity,VALOR_UNITARIO:data.unit_price,VALOR:data.total_value};return{data:transformedItem};},// Update a budget item\nasync updateItem(itemId,updates){// Calculate the total value\nconst totalValue=updates.QTD*updates.VALOR_UNITARIO;const{data,error}=await supabase.from('budget_items').update({material:updates.MATERIAL,unit:updates.UNIDADE,quantity:updates.QTD,unit_price:updates.VALOR_UNITARIO,total_value:totalValue}).eq('id',itemId).select().single();if(error){console.error('Error updating budget item:',error);return{error};}// Transform the item to match the app's data structure\nconst transformedItem={id:data.id,MATERIAL:data.material,UNIDADE:data.unit,QTD:data.quantity,VALOR_UNITARIO:data.unit_price,VALOR:data.total_value};return{data:transformedItem};},// Delete a budget item\nasync deleteItem(itemId){// First, get the item to know its chapter and position\nconst{data:item,error:fetchError}=await supabase.from('budget_items').select('*').eq('id',itemId).single();if(fetchError){console.error('Error fetching item for deletion:',fetchError);return{error:fetchError};}// Delete the item\nconst{error:deleteError}=await supabase.from('budget_items').delete().eq('id',itemId);if(deleteError){console.error('Error deleting budget item:',deleteError);return{error:deleteError};}// Update positions of remaining items\nconst{error:updateError}=await supabase.from('budget_items').update({position:supabase.raw('position - 1')}).eq('chapter_id',item.chapter_id).gt('position',item.position);if(updateError){console.error('Error updating item positions:',updateError);return{error:updateError};}return{success:true};},// Reorder budget items within a chapter\nasync reorderItems(chapterId,itemOrder){// itemOrder should be an array of item IDs in the new order\nfor(let i=0;i<itemOrder.length;i++){const{error}=await supabase.from('budget_items').update({position:i}).eq('id',itemOrder[i]).eq('chapter_id',chapterId);if(error){console.error('Error reordering items:',error);return{error};}}return{success:true};},// Update internal control data\nasync updateInternalControl(projectId,type,data){const{error}=await supabase.from('internal_control').update({data}).eq('project_id',projectId).eq('type',type);if(error){console.error('Error updating internal control data:',error);return{error};}return{success:true};},// Update project settings\nasync updateSettings(projectId,settings){const{error}=await supabase.from('project_settings').update({currency:settings.moeda,number_format:settings.formato_numero,decimal_places:settings.casas_decimais,show_all_chapters:settings.mostrar_todos_capitulos,default_margin:settings.margem_padrao}).eq('project_id',projectId);if(error){console.error('Error updating project settings:',error);return{error};}return{success:true};}};","map":{"version":3,"names":["supabase","budgetService","createChapter","projectId","chapterKey","header","data","chapters","error","fetchError","from","select","eq","order","ascending","limit","console","position","length","insert","project_id","chapter_key","single","updateChapter","chapterId","updates","update","deleteChapter","chapter","itemsError","delete","deleteError","updateError","raw","gt","success","reorderChapters","chapterOrder","i","createItem","itemData","chapterError","items","itemNumber","itemId","split","totalValue","QTD","VALOR_UNITARIO","chapter_id","material","MATERIAL","unit","UNIDADE","quantity","unit_price","total_value","transformedItem","id","VALOR","updateItem","deleteItem","item","reorderItems","itemOrder","updateInternalControl","type","updateSettings","settings","currency","moeda","number_format","formato_numero","decimal_places","casas_decimais","show_all_chapters","mostrar_todos_capitulos","default_margin","margem_padrao"],"sources":["/mnt/c/Users/titob/OneDrive - Ensino LusÃ³fona/EXO/repo-tito/construsud/orcaworks/src/services/budgetService.js"],"sourcesContent":["import { supabase } from '../lib/supabase';\n\nexport const budgetService = {\n  // Create a new chapter\n  async createChapter(projectId, chapterKey, header) {\n    // Get the highest position value to place this chapter at the end\n    const { data: chapters, error: fetchError } = await supabase\n      .from('chapters')\n      .select('position')\n      .eq('project_id', projectId)\n      .order('position', { ascending: false })\n      .limit(1);\n    \n    if (fetchError) {\n      console.error('Error fetching chapters for position:', fetchError);\n      return { error: fetchError };\n    }\n    \n    const position = chapters.length > 0 ? chapters[0].position + 1 : 0;\n    \n    const { data, error } = await supabase\n      .from('chapters')\n      .insert([{\n        project_id: projectId,\n        chapter_key: chapterKey,\n        header,\n        position\n      }])\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error creating chapter:', error);\n      return { error };\n    }\n    \n    return { data };\n  },\n  \n  // Update a chapter\n  async updateChapter(chapterId, updates) {\n    const { data, error } = await supabase\n      .from('chapters')\n      .update(updates)\n      .eq('id', chapterId)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error updating chapter:', error);\n      return { error };\n    }\n    \n    return { data };\n  },\n  \n  // Delete a chapter\n  async deleteChapter(chapterId) {\n    // First, get the chapter to know its project and position\n    const { data: chapter, error: fetchError } = await supabase\n      .from('chapters')\n      .select('*')\n      .eq('id', chapterId)\n      .single();\n    \n    if (fetchError) {\n      console.error('Error fetching chapter for deletion:', fetchError);\n      return { error: fetchError };\n    }\n    \n    // Delete all budget items in this chapter\n    const { error: itemsError } = await supabase\n      .from('budget_items')\n      .delete()\n      .eq('chapter_id', chapterId);\n    \n    if (itemsError) {\n      console.error('Error deleting budget items:', itemsError);\n      return { error: itemsError };\n    }\n    \n    // Delete the chapter\n    const { error: deleteError } = await supabase\n      .from('chapters')\n      .delete()\n      .eq('id', chapterId);\n    \n    if (deleteError) {\n      console.error('Error deleting chapter:', deleteError);\n      return { error: deleteError };\n    }\n    \n    // Update positions of remaining chapters\n    const { error: updateError } = await supabase\n      .from('chapters')\n      .update({ position: supabase.raw('position - 1') })\n      .eq('project_id', chapter.project_id)\n      .gt('position', chapter.position);\n    \n    if (updateError) {\n      console.error('Error updating chapter positions:', updateError);\n      return { error: updateError };\n    }\n    \n    return { success: true };\n  },\n  \n  // Reorder chapters\n  async reorderChapters(projectId, chapterOrder) {\n    // chapterOrder should be an array of chapter IDs in the new order\n    for (let i = 0; i < chapterOrder.length; i++) {\n      const { error } = await supabase\n        .from('chapters')\n        .update({ position: i })\n        .eq('id', chapterOrder[i])\n        .eq('project_id', projectId);\n      \n      if (error) {\n        console.error('Error reordering chapters:', error);\n        return { error };\n      }\n    }\n    \n    return { success: true };\n  },\n  \n  // Create a new budget item\n  async createItem(chapterId, itemData) {\n    // Get the chapter to validate project access and determine chapter_key\n    const { data: chapter, error: chapterError } = await supabase\n      .from('chapters')\n      .select('*')\n      .eq('id', chapterId)\n      .single();\n    \n    if (chapterError) {\n      console.error('Error fetching chapter for item creation:', chapterError);\n      return { error: chapterError };\n    }\n    \n    // Get the highest position value to place this item at the end\n    const { data: items, error: fetchError } = await supabase\n      .from('budget_items')\n      .select('position')\n      .eq('chapter_id', chapterId)\n      .order('position', { ascending: false })\n      .limit(1);\n    \n    if (fetchError) {\n      console.error('Error fetching items for position:', fetchError);\n      return { error: fetchError };\n    }\n    \n    const position = items.length > 0 ? items[0].position + 1 : 0;\n    \n    // Create a unique item ID in the format used by the app (e.g., \"1-1\")\n    const itemNumber = position + 1;\n    const itemId = `${chapter.chapter_key.split(' ')[1]}-${itemNumber}`;\n    \n    // Calculate the total value\n    const totalValue = itemData.QTD * itemData.VALOR_UNITARIO;\n    \n    const { data, error } = await supabase\n      .from('budget_items')\n      .insert([{\n        chapter_id: chapterId,\n        material: itemData.MATERIAL,\n        unit: itemData.UNIDADE,\n        quantity: itemData.QTD,\n        unit_price: itemData.VALOR_UNITARIO,\n        total_value: totalValue,\n        position\n      }])\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error creating budget item:', error);\n      return { error };\n    }\n    \n    // Transform the item to match the app's data structure\n    const transformedItem = {\n      id: itemId,\n      MATERIAL: data.material,\n      UNIDADE: data.unit,\n      QTD: data.quantity,\n      VALOR_UNITARIO: data.unit_price,\n      VALOR: data.total_value\n    };\n    \n    return { data: transformedItem };\n  },\n  \n  // Update a budget item\n  async updateItem(itemId, updates) {\n    // Calculate the total value\n    const totalValue = updates.QTD * updates.VALOR_UNITARIO;\n    \n    const { data, error } = await supabase\n      .from('budget_items')\n      .update({\n        material: updates.MATERIAL,\n        unit: updates.UNIDADE,\n        quantity: updates.QTD,\n        unit_price: updates.VALOR_UNITARIO,\n        total_value: totalValue\n      })\n      .eq('id', itemId)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error updating budget item:', error);\n      return { error };\n    }\n    \n    // Transform the item to match the app's data structure\n    const transformedItem = {\n      id: data.id,\n      MATERIAL: data.material,\n      UNIDADE: data.unit,\n      QTD: data.quantity,\n      VALOR_UNITARIO: data.unit_price,\n      VALOR: data.total_value\n    };\n    \n    return { data: transformedItem };\n  },\n  \n  // Delete a budget item\n  async deleteItem(itemId) {\n    // First, get the item to know its chapter and position\n    const { data: item, error: fetchError } = await supabase\n      .from('budget_items')\n      .select('*')\n      .eq('id', itemId)\n      .single();\n    \n    if (fetchError) {\n      console.error('Error fetching item for deletion:', fetchError);\n      return { error: fetchError };\n    }\n    \n    // Delete the item\n    const { error: deleteError } = await supabase\n      .from('budget_items')\n      .delete()\n      .eq('id', itemId);\n    \n    if (deleteError) {\n      console.error('Error deleting budget item:', deleteError);\n      return { error: deleteError };\n    }\n    \n    // Update positions of remaining items\n    const { error: updateError } = await supabase\n      .from('budget_items')\n      .update({ position: supabase.raw('position - 1') })\n      .eq('chapter_id', item.chapter_id)\n      .gt('position', item.position);\n    \n    if (updateError) {\n      console.error('Error updating item positions:', updateError);\n      return { error: updateError };\n    }\n    \n    return { success: true };\n  },\n  \n  // Reorder budget items within a chapter\n  async reorderItems(chapterId, itemOrder) {\n    // itemOrder should be an array of item IDs in the new order\n    for (let i = 0; i < itemOrder.length; i++) {\n      const { error } = await supabase\n        .from('budget_items')\n        .update({ position: i })\n        .eq('id', itemOrder[i])\n        .eq('chapter_id', chapterId);\n      \n      if (error) {\n        console.error('Error reordering items:', error);\n        return { error };\n      }\n    }\n    \n    return { success: true };\n  },\n  \n  // Update internal control data\n  async updateInternalControl(projectId, type, data) {\n    const { error } = await supabase\n      .from('internal_control')\n      .update({ data })\n      .eq('project_id', projectId)\n      .eq('type', type);\n    \n    if (error) {\n      console.error('Error updating internal control data:', error);\n      return { error };\n    }\n    \n    return { success: true };\n  },\n  \n  // Update project settings\n  async updateSettings(projectId, settings) {\n    const { error } = await supabase\n      .from('project_settings')\n      .update({\n        currency: settings.moeda,\n        number_format: settings.formato_numero,\n        decimal_places: settings.casas_decimais,\n        show_all_chapters: settings.mostrar_todos_capitulos,\n        default_margin: settings.margem_padrao\n      })\n      .eq('project_id', projectId);\n    \n    if (error) {\n      console.error('Error updating project settings:', error);\n      return { error };\n    }\n    \n    return { success: true };\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}