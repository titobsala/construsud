{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/titob/OneDrive - Ensino Lus\\xF3fona/EXO/repo-tito/construsud/orcaworks/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [session, setSession] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [authError, setAuthError] = useState(null);\n  useEffect(() => {\n    // Check active sessions and sets the user\n    const getSession = async () => {\n      var _data$session;\n      setLoading(true);\n      const {\n        data,\n        error\n      } = await supabase.auth.getSession();\n      if (error) {\n        console.error(error);\n        setAuthError(error.message);\n      }\n      setSession(data.session);\n      setUser(((_data$session = data.session) === null || _data$session === void 0 ? void 0 : _data$session.user) || null);\n      setLoading(false);\n    };\n    getSession();\n\n    // Listen for changes to auth state\n    const {\n      data: authListener\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      console.log(`Supabase auth event: ${event}`);\n      setSession(session);\n      setUser((session === null || session === void 0 ? void 0 : session.user) || null);\n      setLoading(false);\n    });\n    return () => {\n      authListener.subscription.unsubscribe();\n    };\n  }, []);\n\n  // Sign up with email and password\n  const signUp = async ({\n    email,\n    password,\n    fullName\n  }) => {\n    setLoading(true);\n    setAuthError(null);\n    const {\n      data,\n      error\n    } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          full_name: fullName\n        }\n      }\n    });\n    if (error) {\n      setAuthError(error.message);\n      setLoading(false);\n      return {\n        error\n      };\n    }\n    setLoading(false);\n    return {\n      data\n    };\n  };\n\n  // Sign in with email and password\n  const signIn = async ({\n    email,\n    password\n  }) => {\n    setLoading(true);\n    setAuthError(null);\n    const {\n      data,\n      error\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    if (error) {\n      setAuthError(error.message);\n      setLoading(false);\n      return {\n        error\n      };\n    }\n    setLoading(false);\n    return {\n      data\n    };\n  };\n\n  // Sign out\n  const signOut = async () => {\n    setLoading(true);\n    const {\n      error\n    } = await supabase.auth.signOut();\n    if (error) {\n      setAuthError(error.message);\n      setLoading(false);\n      return {\n        error\n      };\n    }\n    setSession(null);\n    setUser(null);\n    setLoading(false);\n    return {\n      success: true\n    };\n  };\n\n  // Get user profile\n  const getUserProfile = async () => {\n    if (!user) return {\n      data: null\n    };\n    const {\n      data,\n      error\n    } = await supabase.from('profiles').select('*').eq('id', user.id).single();\n    if (error) {\n      console.error('Error fetching user profile:', error);\n      return {\n        error\n      };\n    }\n    return {\n      data\n    };\n  };\n\n  // Update user profile\n  const updateProfile = async updates => {\n    if (!user) return {\n      data: null\n    };\n    const {\n      data,\n      error\n    } = await supabase.from('profiles').update(updates).eq('id', user.id).select().single();\n    if (error) {\n      console.error('Error updating profile:', error);\n      return {\n        error\n      };\n    }\n    return {\n      data\n    };\n  };\n\n  // Reset password\n  const resetPassword = async email => {\n    setLoading(true);\n    setAuthError(null);\n    const {\n      error\n    } = await supabase.auth.resetPasswordForEmail(email, {\n      redirectTo: `${window.location.origin}/reset-password`\n    });\n    if (error) {\n      setAuthError(error.message);\n      setLoading(false);\n      return {\n        error\n      };\n    }\n    setLoading(false);\n    return {\n      success: true\n    };\n  };\n\n  // Update password\n  const updatePassword = async password => {\n    setLoading(true);\n    setAuthError(null);\n    const {\n      error\n    } = await supabase.auth.updateUser({\n      password\n    });\n    if (error) {\n      setAuthError(error.message);\n      setLoading(false);\n      return {\n        error\n      };\n    }\n    setLoading(false);\n    return {\n      success: true\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      session,\n      loading,\n      authError,\n      signUp,\n      signIn,\n      signOut,\n      resetPassword,\n      updatePassword,\n      getUserProfile,\n      updateProfile\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"76FIWg7ywCZgRxs55UcxryuLNBg=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","session","setSession","loading","setLoading","authError","setAuthError","getSession","_data$session","data","error","auth","console","message","authListener","onAuthStateChange","event","log","subscription","unsubscribe","signUp","email","password","fullName","options","full_name","signIn","signInWithPassword","signOut","success","getUserProfile","from","select","eq","id","single","updateProfile","updates","update","resetPassword","resetPasswordForEmail","redirectTo","window","location","origin","updatePassword","updateUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/mnt/c/Users/titob/OneDrive - Ensino LusÃ³fona/EXO/repo-tito/construsud/orcaworks/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [session, setSession] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [authError, setAuthError] = useState(null);\n\n  useEffect(() => {\n    // Check active sessions and sets the user\n    const getSession = async () => {\n      setLoading(true);\n      const { data, error } = await supabase.auth.getSession();\n      \n      if (error) {\n        console.error(error);\n        setAuthError(error.message);\n      }\n      \n      setSession(data.session);\n      setUser(data.session?.user || null);\n      setLoading(false);\n    };\n\n    getSession();\n\n    // Listen for changes to auth state\n    const { data: authListener } = supabase.auth.onAuthStateChange(async (event, session) => {\n      console.log(`Supabase auth event: ${event}`);\n      setSession(session);\n      setUser(session?.user || null);\n      setLoading(false);\n    });\n\n    return () => {\n      authListener.subscription.unsubscribe();\n    };\n  }, []);\n\n  // Sign up with email and password\n  const signUp = async ({ email, password, fullName }) => {\n    setLoading(true);\n    setAuthError(null);\n    \n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          full_name: fullName,\n        },\n      },\n    });\n\n    if (error) {\n      setAuthError(error.message);\n      setLoading(false);\n      return { error };\n    }\n\n    setLoading(false);\n    return { data };\n  };\n\n  // Sign in with email and password\n  const signIn = async ({ email, password }) => {\n    setLoading(true);\n    setAuthError(null);\n    \n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n\n    if (error) {\n      setAuthError(error.message);\n      setLoading(false);\n      return { error };\n    }\n\n    setLoading(false);\n    return { data };\n  };\n\n  // Sign out\n  const signOut = async () => {\n    setLoading(true);\n    const { error } = await supabase.auth.signOut();\n    \n    if (error) {\n      setAuthError(error.message);\n      setLoading(false);\n      return { error };\n    }\n\n    setSession(null);\n    setUser(null);\n    setLoading(false);\n    return { success: true };\n  };\n\n  // Get user profile\n  const getUserProfile = async () => {\n    if (!user) return { data: null };\n\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', user.id)\n      .single();\n\n    if (error) {\n      console.error('Error fetching user profile:', error);\n      return { error };\n    }\n\n    return { data };\n  };\n\n  // Update user profile\n  const updateProfile = async (updates) => {\n    if (!user) return { data: null };\n\n    const { data, error } = await supabase\n      .from('profiles')\n      .update(updates)\n      .eq('id', user.id)\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error updating profile:', error);\n      return { error };\n    }\n\n    return { data };\n  };\n\n  // Reset password\n  const resetPassword = async (email) => {\n    setLoading(true);\n    setAuthError(null);\n    \n    const { error } = await supabase.auth.resetPasswordForEmail(email, {\n      redirectTo: `${window.location.origin}/reset-password`,\n    });\n\n    if (error) {\n      setAuthError(error.message);\n      setLoading(false);\n      return { error };\n    }\n\n    setLoading(false);\n    return { success: true };\n  };\n\n  // Update password\n  const updatePassword = async (password) => {\n    setLoading(true);\n    setAuthError(null);\n    \n    const { error } = await supabase.auth.updateUser({\n      password,\n    });\n\n    if (error) {\n      setAuthError(error.message);\n      setLoading(false);\n      return { error };\n    }\n\n    setLoading(false);\n    return { success: true };\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        session,\n        loading,\n        authError,\n        signUp,\n        signIn,\n        signOut,\n        resetPassword,\n        updatePassword,\n        getUserProfile,\n        updateProfile,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}