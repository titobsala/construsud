{"ast":null,"code":"import { supabase } from '../lib/supabase';\nexport const budgetService = {\n  // Create a new chapter\n  async createChapter(projectId, chapterKey, header) {\n    // Get the highest position value to place this chapter at the end\n    const {\n      data: chapters,\n      error: fetchError\n    } = await supabase.from('chapters').select('position').eq('project_id', projectId).order('position', {\n      ascending: false\n    }).limit(1);\n    if (fetchError) {\n      console.error('Error fetching chapters for position:', fetchError);\n      return {\n        error: fetchError\n      };\n    }\n    const position = chapters.length > 0 ? chapters[0].position + 1 : 0;\n    const {\n      data,\n      error\n    } = await supabase.from('chapters').insert([{\n      project_id: projectId,\n      chapter_key: chapterKey,\n      header,\n      position\n    }]).select().single();\n    if (error) {\n      console.error('Error creating chapter:', error);\n      return {\n        error\n      };\n    }\n    return {\n      data\n    };\n  },\n  // Update a chapter\n  async updateChapter(chapterId, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('chapters').update(updates).eq('id', chapterId).select().single();\n    if (error) {\n      console.error('Error updating chapter:', error);\n      return {\n        error\n      };\n    }\n    return {\n      data\n    };\n  },\n  // Delete a chapter\n  async deleteChapter(chapterId) {\n    // First, get the chapter to know its project and position\n    const {\n      data: chapter,\n      error: fetchError\n    } = await supabase.from('chapters').select('*').eq('id', chapterId).single();\n    if (fetchError) {\n      console.error('Error fetching chapter for deletion:', fetchError);\n      return {\n        error: fetchError\n      };\n    }\n\n    // Delete all budget items in this chapter\n    const {\n      error: itemsError\n    } = await supabase.from('budget_items').delete().eq('chapter_id', chapterId);\n    if (itemsError) {\n      console.error('Error deleting budget items:', itemsError);\n      return {\n        error: itemsError\n      };\n    }\n\n    // Delete the chapter\n    const {\n      error: deleteError\n    } = await supabase.from('chapters').delete().eq('id', chapterId);\n    if (deleteError) {\n      console.error('Error deleting chapter:', deleteError);\n      return {\n        error: deleteError\n      };\n    }\n\n    // Update positions of remaining chapters\n    const {\n      error: updateError\n    } = await supabase.from('chapters').update({\n      position: supabase.raw('position - 1')\n    }).eq('project_id', chapter.project_id).gt('position', chapter.position);\n    if (updateError) {\n      console.error('Error updating chapter positions:', updateError);\n      return {\n        error: updateError\n      };\n    }\n    return {\n      success: true\n    };\n  },\n  // Reorder chapters\n  async reorderChapters(projectId, chapterOrder) {\n    // chapterOrder should be an array of chapter IDs in the new order\n    for (let i = 0; i < chapterOrder.length; i++) {\n      const {\n        error\n      } = await supabase.from('chapters').update({\n        position: i\n      }).eq('id', chapterOrder[i]).eq('project_id', projectId);\n      if (error) {\n        console.error('Error reordering chapters:', error);\n        return {\n          error\n        };\n      }\n    }\n    return {\n      success: true\n    };\n  },\n  // Create a new budget item\n  async createItem(chapterId, itemData) {\n    // Get the chapter to validate project access and determine chapter_key\n    const {\n      data: chapter,\n      error: chapterError\n    } = await supabase.from('chapters').select('*').eq('id', chapterId).single();\n    if (chapterError) {\n      console.error('Error fetching chapter for item creation:', chapterError);\n      return {\n        error: chapterError\n      };\n    }\n\n    // Get the highest position value to place this item at the end\n    const {\n      data: items,\n      error: fetchError\n    } = await supabase.from('budget_items').select('position').eq('chapter_id', chapterId).order('position', {\n      ascending: false\n    }).limit(1);\n    if (fetchError) {\n      console.error('Error fetching items for position:', fetchError);\n      return {\n        error: fetchError\n      };\n    }\n    const position = items.length > 0 ? items[0].position + 1 : 0;\n\n    // Create a unique item ID in the format used by the app (e.g., \"1-1\")\n    const itemNumber = position + 1;\n    const itemId = `${chapter.chapter_key.split(' ')[1]}-${itemNumber}`;\n\n    // Calculate the total value\n    const totalValue = itemData.QTD * itemData.VALOR_UNITARIO;\n    const {\n      data,\n      error\n    } = await supabase.from('budget_items').insert([{\n      chapter_id: chapterId,\n      material: itemData.MATERIAL,\n      unit: itemData.UNIDADE,\n      quantity: itemData.QTD,\n      unit_price: itemData.VALOR_UNITARIO,\n      total_value: totalValue,\n      position\n    }]).select().single();\n    if (error) {\n      console.error('Error creating budget item:', error);\n      return {\n        error\n      };\n    }\n\n    // Transform the item to match the app's data structure\n    const transformedItem = {\n      id: itemId,\n      MATERIAL: data.material,\n      UNIDADE: data.unit,\n      QTD: data.quantity,\n      VALOR_UNITARIO: data.unit_price,\n      VALOR: data.total_value\n    };\n    return {\n      data: transformedItem\n    };\n  },\n  // Update a budget item\n  async updateItem(itemId, updates) {\n    // Calculate the total value\n    const totalValue = updates.QTD * updates.VALOR_UNITARIO;\n    const {\n      data,\n      error\n    } = await supabase.from('budget_items').update({\n      material: updates.MATERIAL,\n      unit: updates.UNIDADE,\n      quantity: updates.QTD,\n      unit_price: updates.VALOR_UNITARIO,\n      total_value: totalValue\n    }).eq('id', itemId).select().single();\n    if (error) {\n      console.error('Error updating budget item:', error);\n      return {\n        error\n      };\n    }\n\n    // Transform the item to match the app's data structure\n    const transformedItem = {\n      id: data.id,\n      MATERIAL: data.material,\n      UNIDADE: data.unit,\n      QTD: data.quantity,\n      VALOR_UNITARIO: data.unit_price,\n      VALOR: data.total_value\n    };\n    return {\n      data: transformedItem\n    };\n  },\n  // Delete a budget item\n  async deleteItem(itemId) {\n    // First, get the item to know its chapter and position\n    const {\n      data: item,\n      error: fetchError\n    } = await supabase.from('budget_items').select('*').eq('id', itemId).single();\n    if (fetchError) {\n      console.error('Error fetching item for deletion:', fetchError);\n      return {\n        error: fetchError\n      };\n    }\n\n    // Delete the item\n    const {\n      error: deleteError\n    } = await supabase.from('budget_items').delete().eq('id', itemId);\n    if (deleteError) {\n      console.error('Error deleting budget item:', deleteError);\n      return {\n        error: deleteError\n      };\n    }\n\n    // Update positions of remaining items\n    const {\n      error: updateError\n    } = await supabase.from('budget_items').update({\n      position: supabase.raw('position - 1')\n    }).eq('chapter_id', item.chapter_id).gt('position', item.position);\n    if (updateError) {\n      console.error('Error updating item positions:', updateError);\n      return {\n        error: updateError\n      };\n    }\n    return {\n      success: true\n    };\n  },\n  // Reorder budget items within a chapter\n  async reorderItems(chapterId, itemOrder) {\n    // itemOrder should be an array of item IDs in the new order\n    for (let i = 0; i < itemOrder.length; i++) {\n      const {\n        error\n      } = await supabase.from('budget_items').update({\n        position: i\n      }).eq('id', itemOrder[i]).eq('chapter_id', chapterId);\n      if (error) {\n        console.error('Error reordering items:', error);\n        return {\n          error\n        };\n      }\n    }\n    return {\n      success: true\n    };\n  },\n  // Update internal control data\n  async updateInternalControl(projectId, type, data) {\n    const {\n      error\n    } = await supabase.from('internal_control').update({\n      data\n    }).eq('project_id', projectId).eq('type', type);\n    if (error) {\n      console.error('Error updating internal control data:', error);\n      return {\n        error\n      };\n    }\n    return {\n      success: true\n    };\n  },\n  // Update project settings\n  async updateSettings(projectId, settings) {\n    const {\n      error\n    } = await supabase.from('project_settings').update({\n      currency: settings.moeda,\n      number_format: settings.formato_numero,\n      decimal_places: settings.casas_decimais,\n      show_all_chapters: settings.mostrar_todos_capitulos,\n      default_margin: settings.margem_padrao\n    }).eq('project_id', projectId);\n    if (error) {\n      console.error('Error updating project settings:', error);\n      return {\n        error\n      };\n    }\n    return {\n      success: true\n    };\n  }\n};","map":{"version":3,"names":["supabase","budgetService","createChapter","projectId","chapterKey","header","data","chapters","error","fetchError","from","select","eq","order","ascending","limit","console","position","length","insert","project_id","chapter_key","single","updateChapter","chapterId","updates","update","deleteChapter","chapter","itemsError","delete","deleteError","updateError","raw","gt","success","reorderChapters","chapterOrder","i","createItem","itemData","chapterError","items","itemNumber","itemId","split","totalValue","QTD","VALOR_UNITARIO","chapter_id","material","MATERIAL","unit","UNIDADE","quantity","unit_price","total_value","transformedItem","id","VALOR","updateItem","deleteItem","item","reorderItems","itemOrder","updateInternalControl","type","updateSettings","settings","currency","moeda","number_format","formato_numero","decimal_places","casas_decimais","show_all_chapters","mostrar_todos_capitulos","default_margin","margem_padrao"],"sources":["/mnt/c/Users/titob/OneDrive - Ensino Lusófona/EXO/repo-tito/construsud/orcaworks/src/services/budgetService.js"],"sourcesContent":["import { supabase } from '../lib/supabase';\n\nexport const budgetService = {\n  // Create a new chapter\n  async createChapter(projectId, chapterKey, header) {\n    // Get the highest position value to place this chapter at the end\n    const { data: chapters, error: fetchError } = await supabase\n      .from('chapters')\n      .select('position')\n      .eq('project_id', projectId)\n      .order('position', { ascending: false })\n      .limit(1);\n    \n    if (fetchError) {\n      console.error('Error fetching chapters for position:', fetchError);\n      return { error: fetchError };\n    }\n    \n    const position = chapters.length > 0 ? chapters[0].position + 1 : 0;\n    \n    const { data, error } = await supabase\n      .from('chapters')\n      .insert([{\n        project_id: projectId,\n        chapter_key: chapterKey,\n        header,\n        position\n      }])\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error creating chapter:', error);\n      return { error };\n    }\n    \n    return { data };\n  },\n  \n  // Update a chapter\n  async updateChapter(chapterId, updates) {\n    const { data, error } = await supabase\n      .from('chapters')\n      .update(updates)\n      .eq('id', chapterId)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error updating chapter:', error);\n      return { error };\n    }\n    \n    return { data };\n  },\n  \n  // Delete a chapter\n  async deleteChapter(chapterId) {\n    // First, get the chapter to know its project and position\n    const { data: chapter, error: fetchError } = await supabase\n      .from('chapters')\n      .select('*')\n      .eq('id', chapterId)\n      .single();\n    \n    if (fetchError) {\n      console.error('Error fetching chapter for deletion:', fetchError);\n      return { error: fetchError };\n    }\n    \n    // Delete all budget items in this chapter\n    const { error: itemsError } = await supabase\n      .from('budget_items')\n      .delete()\n      .eq('chapter_id', chapterId);\n    \n    if (itemsError) {\n      console.error('Error deleting budget items:', itemsError);\n      return { error: itemsError };\n    }\n    \n    // Delete the chapter\n    const { error: deleteError } = await supabase\n      .from('chapters')\n      .delete()\n      .eq('id', chapterId);\n    \n    if (deleteError) {\n      console.error('Error deleting chapter:', deleteError);\n      return { error: deleteError };\n    }\n    \n    // Update positions of remaining chapters\n    const { error: updateError } = await supabase\n      .from('chapters')\n      .update({ position: supabase.raw('position - 1') })\n      .eq('project_id', chapter.project_id)\n      .gt('position', chapter.position);\n    \n    if (updateError) {\n      console.error('Error updating chapter positions:', updateError);\n      return { error: updateError };\n    }\n    \n    return { success: true };\n  },\n  \n  // Reorder chapters\n  async reorderChapters(projectId, chapterOrder) {\n    // chapterOrder should be an array of chapter IDs in the new order\n    for (let i = 0; i < chapterOrder.length; i++) {\n      const { error } = await supabase\n        .from('chapters')\n        .update({ position: i })\n        .eq('id', chapterOrder[i])\n        .eq('project_id', projectId);\n      \n      if (error) {\n        console.error('Error reordering chapters:', error);\n        return { error };\n      }\n    }\n    \n    return { success: true };\n  },\n  \n  // Create a new budget item\n  async createItem(chapterId, itemData) {\n    // Get the chapter to validate project access and determine chapter_key\n    const { data: chapter, error: chapterError } = await supabase\n      .from('chapters')\n      .select('*')\n      .eq('id', chapterId)\n      .single();\n    \n    if (chapterError) {\n      console.error('Error fetching chapter for item creation:', chapterError);\n      return { error: chapterError };\n    }\n    \n    // Get the highest position value to place this item at the end\n    const { data: items, error: fetchError } = await supabase\n      .from('budget_items')\n      .select('position')\n      .eq('chapter_id', chapterId)\n      .order('position', { ascending: false })\n      .limit(1);\n    \n    if (fetchError) {\n      console.error('Error fetching items for position:', fetchError);\n      return { error: fetchError };\n    }\n    \n    const position = items.length > 0 ? items[0].position + 1 : 0;\n    \n    // Create a unique item ID in the format used by the app (e.g., \"1-1\")\n    const itemNumber = position + 1;\n    const itemId = `${chapter.chapter_key.split(' ')[1]}-${itemNumber}`;\n    \n    // Calculate the total value\n    const totalValue = itemData.QTD * itemData.VALOR_UNITARIO;\n    \n    const { data, error } = await supabase\n      .from('budget_items')\n      .insert([{\n        chapter_id: chapterId,\n        material: itemData.MATERIAL,\n        unit: itemData.UNIDADE,\n        quantity: itemData.QTD,\n        unit_price: itemData.VALOR_UNITARIO,\n        total_value: totalValue,\n        position\n      }])\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error creating budget item:', error);\n      return { error };\n    }\n    \n    // Transform the item to match the app's data structure\n    const transformedItem = {\n      id: itemId,\n      MATERIAL: data.material,\n      UNIDADE: data.unit,\n      QTD: data.quantity,\n      VALOR_UNITARIO: data.unit_price,\n      VALOR: data.total_value\n    };\n    \n    return { data: transformedItem };\n  },\n  \n  // Update a budget item\n  async updateItem(itemId, updates) {\n    // Calculate the total value\n    const totalValue = updates.QTD * updates.VALOR_UNITARIO;\n    \n    const { data, error } = await supabase\n      .from('budget_items')\n      .update({\n        material: updates.MATERIAL,\n        unit: updates.UNIDADE,\n        quantity: updates.QTD,\n        unit_price: updates.VALOR_UNITARIO,\n        total_value: totalValue\n      })\n      .eq('id', itemId)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error updating budget item:', error);\n      return { error };\n    }\n    \n    // Transform the item to match the app's data structure\n    const transformedItem = {\n      id: data.id,\n      MATERIAL: data.material,\n      UNIDADE: data.unit,\n      QTD: data.quantity,\n      VALOR_UNITARIO: data.unit_price,\n      VALOR: data.total_value\n    };\n    \n    return { data: transformedItem };\n  },\n  \n  // Delete a budget item\n  async deleteItem(itemId) {\n    // First, get the item to know its chapter and position\n    const { data: item, error: fetchError } = await supabase\n      .from('budget_items')\n      .select('*')\n      .eq('id', itemId)\n      .single();\n    \n    if (fetchError) {\n      console.error('Error fetching item for deletion:', fetchError);\n      return { error: fetchError };\n    }\n    \n    // Delete the item\n    const { error: deleteError } = await supabase\n      .from('budget_items')\n      .delete()\n      .eq('id', itemId);\n    \n    if (deleteError) {\n      console.error('Error deleting budget item:', deleteError);\n      return { error: deleteError };\n    }\n    \n    // Update positions of remaining items\n    const { error: updateError } = await supabase\n      .from('budget_items')\n      .update({ position: supabase.raw('position - 1') })\n      .eq('chapter_id', item.chapter_id)\n      .gt('position', item.position);\n    \n    if (updateError) {\n      console.error('Error updating item positions:', updateError);\n      return { error: updateError };\n    }\n    \n    return { success: true };\n  },\n  \n  // Reorder budget items within a chapter\n  async reorderItems(chapterId, itemOrder) {\n    // itemOrder should be an array of item IDs in the new order\n    for (let i = 0; i < itemOrder.length; i++) {\n      const { error } = await supabase\n        .from('budget_items')\n        .update({ position: i })\n        .eq('id', itemOrder[i])\n        .eq('chapter_id', chapterId);\n      \n      if (error) {\n        console.error('Error reordering items:', error);\n        return { error };\n      }\n    }\n    \n    return { success: true };\n  },\n  \n  // Update internal control data\n  async updateInternalControl(projectId, type, data) {\n    const { error } = await supabase\n      .from('internal_control')\n      .update({ data })\n      .eq('project_id', projectId)\n      .eq('type', type);\n    \n    if (error) {\n      console.error('Error updating internal control data:', error);\n      return { error };\n    }\n    \n    return { success: true };\n  },\n  \n  // Update project settings\n  async updateSettings(projectId, settings) {\n    const { error } = await supabase\n      .from('project_settings')\n      .update({\n        currency: settings.moeda,\n        number_format: settings.formato_numero,\n        decimal_places: settings.casas_decimais,\n        show_all_chapters: settings.mostrar_todos_capitulos,\n        default_margin: settings.margem_padrao\n      })\n      .eq('project_id', projectId);\n    \n    if (error) {\n      console.error('Error updating project settings:', error);\n      return { error };\n    }\n    \n    return { success: true };\n  }\n};"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,iBAAiB;AAE1C,OAAO,MAAMC,aAAa,GAAG;EAC3B;EACA,MAAMC,aAAaA,CAACC,SAAS,EAAEC,UAAU,EAAEC,MAAM,EAAE;IACjD;IACA,MAAM;MAAEC,IAAI,EAAEC,QAAQ;MAAEC,KAAK,EAAEC;IAAW,CAAC,GAAG,MAAMT,QAAQ,CACzDU,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,UAAU,CAAC,CAClBC,EAAE,CAAC,YAAY,EAAET,SAAS,CAAC,CAC3BU,KAAK,CAAC,UAAU,EAAE;MAAEC,SAAS,EAAE;IAAM,CAAC,CAAC,CACvCC,KAAK,CAAC,CAAC,CAAC;IAEX,IAAIN,UAAU,EAAE;MACdO,OAAO,CAACR,KAAK,CAAC,uCAAuC,EAAEC,UAAU,CAAC;MAClE,OAAO;QAAED,KAAK,EAAEC;MAAW,CAAC;IAC9B;IAEA,MAAMQ,QAAQ,GAAGV,QAAQ,CAACW,MAAM,GAAG,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAACU,QAAQ,GAAG,CAAC,GAAG,CAAC;IAEnE,MAAM;MAAEX,IAAI;MAAEE;IAAM,CAAC,GAAG,MAAMR,QAAQ,CACnCU,IAAI,CAAC,UAAU,CAAC,CAChBS,MAAM,CAAC,CAAC;MACPC,UAAU,EAAEjB,SAAS;MACrBkB,WAAW,EAAEjB,UAAU;MACvBC,MAAM;MACNY;IACF,CAAC,CAAC,CAAC,CACFN,MAAM,CAAC,CAAC,CACRW,MAAM,CAAC,CAAC;IAEX,IAAId,KAAK,EAAE;MACTQ,OAAO,CAACR,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO;QAAEA;MAAM,CAAC;IAClB;IAEA,OAAO;MAAEF;IAAK,CAAC;EACjB,CAAC;EAED;EACA,MAAMiB,aAAaA,CAACC,SAAS,EAAEC,OAAO,EAAE;IACtC,MAAM;MAAEnB,IAAI;MAAEE;IAAM,CAAC,GAAG,MAAMR,QAAQ,CACnCU,IAAI,CAAC,UAAU,CAAC,CAChBgB,MAAM,CAACD,OAAO,CAAC,CACfb,EAAE,CAAC,IAAI,EAAEY,SAAS,CAAC,CACnBb,MAAM,CAAC,CAAC,CACRW,MAAM,CAAC,CAAC;IAEX,IAAId,KAAK,EAAE;MACTQ,OAAO,CAACR,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO;QAAEA;MAAM,CAAC;IAClB;IAEA,OAAO;MAAEF;IAAK,CAAC;EACjB,CAAC;EAED;EACA,MAAMqB,aAAaA,CAACH,SAAS,EAAE;IAC7B;IACA,MAAM;MAAElB,IAAI,EAAEsB,OAAO;MAAEpB,KAAK,EAAEC;IAAW,CAAC,GAAG,MAAMT,QAAQ,CACxDU,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,IAAI,EAAEY,SAAS,CAAC,CACnBF,MAAM,CAAC,CAAC;IAEX,IAAIb,UAAU,EAAE;MACdO,OAAO,CAACR,KAAK,CAAC,sCAAsC,EAAEC,UAAU,CAAC;MACjE,OAAO;QAAED,KAAK,EAAEC;MAAW,CAAC;IAC9B;;IAEA;IACA,MAAM;MAAED,KAAK,EAAEqB;IAAW,CAAC,GAAG,MAAM7B,QAAQ,CACzCU,IAAI,CAAC,cAAc,CAAC,CACpBoB,MAAM,CAAC,CAAC,CACRlB,EAAE,CAAC,YAAY,EAAEY,SAAS,CAAC;IAE9B,IAAIK,UAAU,EAAE;MACdb,OAAO,CAACR,KAAK,CAAC,8BAA8B,EAAEqB,UAAU,CAAC;MACzD,OAAO;QAAErB,KAAK,EAAEqB;MAAW,CAAC;IAC9B;;IAEA;IACA,MAAM;MAAErB,KAAK,EAAEuB;IAAY,CAAC,GAAG,MAAM/B,QAAQ,CAC1CU,IAAI,CAAC,UAAU,CAAC,CAChBoB,MAAM,CAAC,CAAC,CACRlB,EAAE,CAAC,IAAI,EAAEY,SAAS,CAAC;IAEtB,IAAIO,WAAW,EAAE;MACff,OAAO,CAACR,KAAK,CAAC,yBAAyB,EAAEuB,WAAW,CAAC;MACrD,OAAO;QAAEvB,KAAK,EAAEuB;MAAY,CAAC;IAC/B;;IAEA;IACA,MAAM;MAAEvB,KAAK,EAAEwB;IAAY,CAAC,GAAG,MAAMhC,QAAQ,CAC1CU,IAAI,CAAC,UAAU,CAAC,CAChBgB,MAAM,CAAC;MAAET,QAAQ,EAAEjB,QAAQ,CAACiC,GAAG,CAAC,cAAc;IAAE,CAAC,CAAC,CAClDrB,EAAE,CAAC,YAAY,EAAEgB,OAAO,CAACR,UAAU,CAAC,CACpCc,EAAE,CAAC,UAAU,EAAEN,OAAO,CAACX,QAAQ,CAAC;IAEnC,IAAIe,WAAW,EAAE;MACfhB,OAAO,CAACR,KAAK,CAAC,mCAAmC,EAAEwB,WAAW,CAAC;MAC/D,OAAO;QAAExB,KAAK,EAAEwB;MAAY,CAAC;IAC/B;IAEA,OAAO;MAAEG,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC;EAED;EACA,MAAMC,eAAeA,CAACjC,SAAS,EAAEkC,YAAY,EAAE;IAC7C;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,YAAY,CAACnB,MAAM,EAAEoB,CAAC,EAAE,EAAE;MAC5C,MAAM;QAAE9B;MAAM,CAAC,GAAG,MAAMR,QAAQ,CAC7BU,IAAI,CAAC,UAAU,CAAC,CAChBgB,MAAM,CAAC;QAAET,QAAQ,EAAEqB;MAAE,CAAC,CAAC,CACvB1B,EAAE,CAAC,IAAI,EAAEyB,YAAY,CAACC,CAAC,CAAC,CAAC,CACzB1B,EAAE,CAAC,YAAY,EAAET,SAAS,CAAC;MAE9B,IAAIK,KAAK,EAAE;QACTQ,OAAO,CAACR,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClD,OAAO;UAAEA;QAAM,CAAC;MAClB;IACF;IAEA,OAAO;MAAE2B,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC;EAED;EACA,MAAMI,UAAUA,CAACf,SAAS,EAAEgB,QAAQ,EAAE;IACpC;IACA,MAAM;MAAElC,IAAI,EAAEsB,OAAO;MAAEpB,KAAK,EAAEiC;IAAa,CAAC,GAAG,MAAMzC,QAAQ,CAC1DU,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,IAAI,EAAEY,SAAS,CAAC,CACnBF,MAAM,CAAC,CAAC;IAEX,IAAImB,YAAY,EAAE;MAChBzB,OAAO,CAACR,KAAK,CAAC,2CAA2C,EAAEiC,YAAY,CAAC;MACxE,OAAO;QAAEjC,KAAK,EAAEiC;MAAa,CAAC;IAChC;;IAEA;IACA,MAAM;MAAEnC,IAAI,EAAEoC,KAAK;MAAElC,KAAK,EAAEC;IAAW,CAAC,GAAG,MAAMT,QAAQ,CACtDU,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAAC,UAAU,CAAC,CAClBC,EAAE,CAAC,YAAY,EAAEY,SAAS,CAAC,CAC3BX,KAAK,CAAC,UAAU,EAAE;MAAEC,SAAS,EAAE;IAAM,CAAC,CAAC,CACvCC,KAAK,CAAC,CAAC,CAAC;IAEX,IAAIN,UAAU,EAAE;MACdO,OAAO,CAACR,KAAK,CAAC,oCAAoC,EAAEC,UAAU,CAAC;MAC/D,OAAO;QAAED,KAAK,EAAEC;MAAW,CAAC;IAC9B;IAEA,MAAMQ,QAAQ,GAAGyB,KAAK,CAACxB,MAAM,GAAG,CAAC,GAAGwB,KAAK,CAAC,CAAC,CAAC,CAACzB,QAAQ,GAAG,CAAC,GAAG,CAAC;;IAE7D;IACA,MAAM0B,UAAU,GAAG1B,QAAQ,GAAG,CAAC;IAC/B,MAAM2B,MAAM,GAAG,GAAGhB,OAAO,CAACP,WAAW,CAACwB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAIF,UAAU,EAAE;;IAEnE;IACA,MAAMG,UAAU,GAAGN,QAAQ,CAACO,GAAG,GAAGP,QAAQ,CAACQ,cAAc;IAEzD,MAAM;MAAE1C,IAAI;MAAEE;IAAM,CAAC,GAAG,MAAMR,QAAQ,CACnCU,IAAI,CAAC,cAAc,CAAC,CACpBS,MAAM,CAAC,CAAC;MACP8B,UAAU,EAAEzB,SAAS;MACrB0B,QAAQ,EAAEV,QAAQ,CAACW,QAAQ;MAC3BC,IAAI,EAAEZ,QAAQ,CAACa,OAAO;MACtBC,QAAQ,EAAEd,QAAQ,CAACO,GAAG;MACtBQ,UAAU,EAAEf,QAAQ,CAACQ,cAAc;MACnCQ,WAAW,EAAEV,UAAU;MACvB7B;IACF,CAAC,CAAC,CAAC,CACFN,MAAM,CAAC,CAAC,CACRW,MAAM,CAAC,CAAC;IAEX,IAAId,KAAK,EAAE;MACTQ,OAAO,CAACR,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAO;QAAEA;MAAM,CAAC;IAClB;;IAEA;IACA,MAAMiD,eAAe,GAAG;MACtBC,EAAE,EAAEd,MAAM;MACVO,QAAQ,EAAE7C,IAAI,CAAC4C,QAAQ;MACvBG,OAAO,EAAE/C,IAAI,CAAC8C,IAAI;MAClBL,GAAG,EAAEzC,IAAI,CAACgD,QAAQ;MAClBN,cAAc,EAAE1C,IAAI,CAACiD,UAAU;MAC/BI,KAAK,EAAErD,IAAI,CAACkD;IACd,CAAC;IAED,OAAO;MAAElD,IAAI,EAAEmD;IAAgB,CAAC;EAClC,CAAC;EAED;EACA,MAAMG,UAAUA,CAAChB,MAAM,EAAEnB,OAAO,EAAE;IAChC;IACA,MAAMqB,UAAU,GAAGrB,OAAO,CAACsB,GAAG,GAAGtB,OAAO,CAACuB,cAAc;IAEvD,MAAM;MAAE1C,IAAI;MAAEE;IAAM,CAAC,GAAG,MAAMR,QAAQ,CACnCU,IAAI,CAAC,cAAc,CAAC,CACpBgB,MAAM,CAAC;MACNwB,QAAQ,EAAEzB,OAAO,CAAC0B,QAAQ;MAC1BC,IAAI,EAAE3B,OAAO,CAAC4B,OAAO;MACrBC,QAAQ,EAAE7B,OAAO,CAACsB,GAAG;MACrBQ,UAAU,EAAE9B,OAAO,CAACuB,cAAc;MAClCQ,WAAW,EAAEV;IACf,CAAC,CAAC,CACDlC,EAAE,CAAC,IAAI,EAAEgC,MAAM,CAAC,CAChBjC,MAAM,CAAC,CAAC,CACRW,MAAM,CAAC,CAAC;IAEX,IAAId,KAAK,EAAE;MACTQ,OAAO,CAACR,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAO;QAAEA;MAAM,CAAC;IAClB;;IAEA;IACA,MAAMiD,eAAe,GAAG;MACtBC,EAAE,EAAEpD,IAAI,CAACoD,EAAE;MACXP,QAAQ,EAAE7C,IAAI,CAAC4C,QAAQ;MACvBG,OAAO,EAAE/C,IAAI,CAAC8C,IAAI;MAClBL,GAAG,EAAEzC,IAAI,CAACgD,QAAQ;MAClBN,cAAc,EAAE1C,IAAI,CAACiD,UAAU;MAC/BI,KAAK,EAAErD,IAAI,CAACkD;IACd,CAAC;IAED,OAAO;MAAElD,IAAI,EAAEmD;IAAgB,CAAC;EAClC,CAAC;EAED;EACA,MAAMI,UAAUA,CAACjB,MAAM,EAAE;IACvB;IACA,MAAM;MAAEtC,IAAI,EAAEwD,IAAI;MAAEtD,KAAK,EAAEC;IAAW,CAAC,GAAG,MAAMT,QAAQ,CACrDU,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,IAAI,EAAEgC,MAAM,CAAC,CAChBtB,MAAM,CAAC,CAAC;IAEX,IAAIb,UAAU,EAAE;MACdO,OAAO,CAACR,KAAK,CAAC,mCAAmC,EAAEC,UAAU,CAAC;MAC9D,OAAO;QAAED,KAAK,EAAEC;MAAW,CAAC;IAC9B;;IAEA;IACA,MAAM;MAAED,KAAK,EAAEuB;IAAY,CAAC,GAAG,MAAM/B,QAAQ,CAC1CU,IAAI,CAAC,cAAc,CAAC,CACpBoB,MAAM,CAAC,CAAC,CACRlB,EAAE,CAAC,IAAI,EAAEgC,MAAM,CAAC;IAEnB,IAAIb,WAAW,EAAE;MACff,OAAO,CAACR,KAAK,CAAC,6BAA6B,EAAEuB,WAAW,CAAC;MACzD,OAAO;QAAEvB,KAAK,EAAEuB;MAAY,CAAC;IAC/B;;IAEA;IACA,MAAM;MAAEvB,KAAK,EAAEwB;IAAY,CAAC,GAAG,MAAMhC,QAAQ,CAC1CU,IAAI,CAAC,cAAc,CAAC,CACpBgB,MAAM,CAAC;MAAET,QAAQ,EAAEjB,QAAQ,CAACiC,GAAG,CAAC,cAAc;IAAE,CAAC,CAAC,CAClDrB,EAAE,CAAC,YAAY,EAAEkD,IAAI,CAACb,UAAU,CAAC,CACjCf,EAAE,CAAC,UAAU,EAAE4B,IAAI,CAAC7C,QAAQ,CAAC;IAEhC,IAAIe,WAAW,EAAE;MACfhB,OAAO,CAACR,KAAK,CAAC,gCAAgC,EAAEwB,WAAW,CAAC;MAC5D,OAAO;QAAExB,KAAK,EAAEwB;MAAY,CAAC;IAC/B;IAEA,OAAO;MAAEG,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC;EAED;EACA,MAAM4B,YAAYA,CAACvC,SAAS,EAAEwC,SAAS,EAAE;IACvC;IACA,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,SAAS,CAAC9C,MAAM,EAAEoB,CAAC,EAAE,EAAE;MACzC,MAAM;QAAE9B;MAAM,CAAC,GAAG,MAAMR,QAAQ,CAC7BU,IAAI,CAAC,cAAc,CAAC,CACpBgB,MAAM,CAAC;QAAET,QAAQ,EAAEqB;MAAE,CAAC,CAAC,CACvB1B,EAAE,CAAC,IAAI,EAAEoD,SAAS,CAAC1B,CAAC,CAAC,CAAC,CACtB1B,EAAE,CAAC,YAAY,EAAEY,SAAS,CAAC;MAE9B,IAAIhB,KAAK,EAAE;QACTQ,OAAO,CAACR,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C,OAAO;UAAEA;QAAM,CAAC;MAClB;IACF;IAEA,OAAO;MAAE2B,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC;EAED;EACA,MAAM8B,qBAAqBA,CAAC9D,SAAS,EAAE+D,IAAI,EAAE5D,IAAI,EAAE;IACjD,MAAM;MAAEE;IAAM,CAAC,GAAG,MAAMR,QAAQ,CAC7BU,IAAI,CAAC,kBAAkB,CAAC,CACxBgB,MAAM,CAAC;MAAEpB;IAAK,CAAC,CAAC,CAChBM,EAAE,CAAC,YAAY,EAAET,SAAS,CAAC,CAC3BS,EAAE,CAAC,MAAM,EAAEsD,IAAI,CAAC;IAEnB,IAAI1D,KAAK,EAAE;MACTQ,OAAO,CAACR,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC7D,OAAO;QAAEA;MAAM,CAAC;IAClB;IAEA,OAAO;MAAE2B,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC;EAED;EACA,MAAMgC,cAAcA,CAAChE,SAAS,EAAEiE,QAAQ,EAAE;IACxC,MAAM;MAAE5D;IAAM,CAAC,GAAG,MAAMR,QAAQ,CAC7BU,IAAI,CAAC,kBAAkB,CAAC,CACxBgB,MAAM,CAAC;MACN2C,QAAQ,EAAED,QAAQ,CAACE,KAAK;MACxBC,aAAa,EAAEH,QAAQ,CAACI,cAAc;MACtCC,cAAc,EAAEL,QAAQ,CAACM,cAAc;MACvCC,iBAAiB,EAAEP,QAAQ,CAACQ,uBAAuB;MACnDC,cAAc,EAAET,QAAQ,CAACU;IAC3B,CAAC,CAAC,CACDlE,EAAE,CAAC,YAAY,EAAET,SAAS,CAAC;IAE9B,IAAIK,KAAK,EAAE;MACTQ,OAAO,CAACR,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,OAAO;QAAEA;MAAM,CAAC;IAClB;IAEA,OAAO;MAAE2B,OAAO,EAAE;IAAK,CAAC;EAC1B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}